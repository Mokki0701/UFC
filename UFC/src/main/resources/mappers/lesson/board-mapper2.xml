<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN " "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.cooof.lesson.dashBoard.mapper.DashBoardMapper">

	<select id="findLesson" resultType="LessonListDTO">
	
		SELECT LESSON_TITLE , LESSON_NO 
		FROM STUDENT_ENROLLMENTS E
		JOIN LESSONS L USING (LESSON_NO) 
		WHERE E.MEMBER_NO  = #{loginMemberId}
	
	</select>
	
	<!-- 별점 등록시 이미 등록된 후기가 있는지 찾아보기 -->
	<select id="searchLessonNo" resultType="_int">
		SELECT COUNT(*)  
		FROM STAR_MANAGEMENT
		WHERE LESSON_NO = #{lessonNo} 
		AND MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 후기 등록 -->
	<insert id="insertReview">
	
		INSERT INTO STAR_MANAGEMENT
		VALUES (#{lessonNo},#{memberNo},#{lessonStar})
	
	</insert>
	
 	<update id="updateReview">
		UPDATE STAR_MANAGEMENT
		SET LESSON_STAR = #{lessonStar}
		WHERE LESSON_NO = #{lessonNo}
		AND MEMBER_NO = #{memberNo}
    </update> 
    
    <select id="findStar">
    	
    	SELECT NVL(AVG(LESSON_STAR),0) 
		FROM STAR_MANAGEMENT
		WHERE LESSON_NO = #{lessonNo}
		AND MEMBER_NO = #{memberNo}
    
    </select>
    
    <select id="instructorLesson" resultType="LessonInstructorDTO">
    
    	SELECT LESSON_TITLE , LESSON_NO 
		FROM LESSONS
		WHERE MEMBER_NO = #{loginMemberId}
    
    </select>
    
    <!-- 해당 날짜의 강의가 맞는지 확인 -->
	<select id="countLesson" resultType="_int">
    
    	SELECT COUNT(*) AS CNT  
		FROM LESSONS
		WHERE LESSON_NO = #{lessonNo}
		AND #{date} BETWEEN TO_CHAR(LESSON_START_DATE, 'YYYYMMDD') AND TO_CHAR(LESSON_END_DATE, 'YYYYMMDD')
		AND TO_CHAR(TO_DATE(#{date}), 'dy') = SUBSTR(LESSON_SCHEDULE, 0,1)
    
    </select>
    
    <select id="confirmLesson" resultType="LessonListDTO">
    
	    SELECT 
	    MEMBER_NO,
	    MEMBER_LAST_NAME || ' ' || MEMBER_FIRST_NAME AS FULL_NAME
		FROM 
		    STUDENT_ENROLLMENTS 
		JOIN 
		    "MEMBER" USING(MEMBER_NO)
		WHERE 
		    LESSON_NO = #{lessonNo}
    
    </select>
    
    <!-- 출석 모두 등록 -->
<!--   	<insert id="addList" parameterType="list"> -->
<!-- 		INSERT INTO "LESSONS_ATTENDANCE" -->
		
<!-- 		<foreach collection="list" item="student" separator=" UNION"> -->
<!-- 		SELECT #{student.date},#{student.memberNo},#{student.lessonNo} -->
<!-- 		FROM DUAL -->
<!-- 		</foreach> -->
	
<!-- 	</insert>   -->
	
 	<insert id="addList2" parameterType="list">
	
		MERGE INTO "LESSONS_ATTENDANCE" T1
		USING(
			<foreach collection="list" item="student" separator=" UNION">
			<if test="student.attendYn == 'Y'.toString()">
				SELECT 
				#{student.date} AS LESSONS_DATE
				,#{student.memberNo} AS MEMBER_NO
				,#{student.lessonNo} AS LESSON_NO
				FROM DUAL
			</if>
			</foreach>
			
		) T2
		ON (T1.MEMBER_NO = T2.MEMBER_NO AND T1.LESSON_NO = T2.LESSON_NO AND)
		WHEN NOT MATCHED THEN
			INSERT(LESSONS_DATE,MEMBER_NO,LESSON_NO) VALUES(T2.LESSONS_DATE , T2.MEMBER_NO, T2.LESSON_NO)
	</insert>
	
	<insert id="addList" parameterType="list">
    
        
   MERGE INTO "LESSONS_ATTENDANCE" T1
    USING (
        <foreach collection="list" item="student" separator=" UNION ALL">
            <choose>
                <when test='student.attendYn != null and student.attendYn.equals("Y")'>
                    SELECT 
                        #{student.date} AS LESSONS_DATE,
                        #{student.memberNo} AS MEMBER_NO,
                        #{student.lessonNo} AS LESSON_NO
                    FROM DUAL
                </when>
                <otherwise>
                    SELECT NULL as LESSONS_DATE, NULL AS MEMBER_NO, NULL AS LESSON_NO FROM DUAL WHERE 1=0
                </otherwise>
            </choose>
        </foreach>
    ) T2
    ON (T1.MEMBER_NO = T2.MEMBER_NO AND T1.LESSON_NO = T2.LESSON_NO AND T1.LESSONS_DATE = T2.LESSONS_DATE)
    WHEN NOT MATCHED THEN
        INSERT (LESSONS_DATE, MEMBER_NO, LESSON_NO) 
        VALUES (T2.LESSONS_DATE, T2.MEMBER_NO, T2.LESSON_NO)     
</insert>
	
	<!-- 강사 별점 리뷰 확인 -->
	<select id="checkReview" resultType="_int">
	
		SELECT ROUND(NVL(AVG(LESSON_STAR),0))  
		FROM STAR_MANAGEMENT
		WHERE LESSON_NO = #{lessonNo}
	
	</select>
	

	<select id="statusCheck" resultType="AttendanceDTO">
	    <![CDATA[
	    WITH MAIN AS (  
	        SELECT LESSONS_DATE, MEMBER_NO
	        FROM (
	            SELECT TO_CHAR(LESSON_START_DATE + LEVEL - 1, 'YYYY-MM-DD') AS LESSONS_DATE
	            FROM (
	                SELECT LESSON_START_DATE, LESSON_END_DATE, 
	                       SUBSTR(LESSON_SCHEDULE, 0, 1) AS DY
	                FROM LESSONS
	                WHERE LESSON_NO = #{lessonNo}
	            )
	            WHERE DY = TO_CHAR(LESSON_START_DATE + LEVEL - 1, 'DY')
	            CONNECT BY LEVEL <= (LESSON_END_DATE - LESSON_START_DATE + 1)
	        )
	        CROSS JOIN (
	            SELECT * FROM STUDENT_ENROLLMENTS
	            WHERE LESSON_NO = #{lessonNo}
	        )
	    )
	    SELECT MAIN.LESSONS_DATE, MAIN.MEMBER_NO,C.MEMBER_LAST_NAME, MEMBER_LAST_NAME || ' ' || MEMBER_FIRST_NAME AS FULL_NAME
	           ,NVL((SELECT 'Y'
	                FROM LESSONS_ATTENDANCE SUB
	                WHERE LESSON_NO = #{lessonNo}
	                  AND MAIN.LESSONS_DATE = SUB.LESSONS_DATE
	                  AND MAIN.MEMBER_NO = SUB.MEMBER_NO), 'N') AS ATTENDANCE_STATUS
	    FROM MAIN,  MEMBER C
	    WHERE 1=1
	    AND MAIN.MEMBER_NO = C.MEMBER_NO
	    AND LESSONS_DATE = #{date}
	    ]]>
</select>


	<!-- 특정 강의 총 수업 일수  -->
	<select id="getTotalLessonDays" resultType="_int">
		<![CDATA[
		SELECT COUNT(*)
		FROM (
		SELECT TO_CHAR(LESSON_START_DATE + LEVEL - 1, 'YYYY-MM-DD') LESSONS_DATE
	      FROM (
	         SELECT LESSON_START_DATE, LESSON_END_DATE, 
	                  SUBSTR(LESSON_SCHEDULE, 0, 1) AS DY
	         FROM LESSONS
	         WHERE LESSON_NO = #{lessonNo}
	      )
	      WHERE DY = TO_CHAR(LESSON_START_DATE + LEVEL - 1, 'DY')
	      CONNECT BY LEVEL <= (LESSON_END_DATE - LESSON_START_DATE + 1)
		)
		]]>
	</select>
	
	<select id="getAttendanceCount" resultType="_int">
	
		SELECT COUNT(*)
		FROM LESSONS_ATTENDANCE
		WHERE MEMBER_NO = #{memberNo}
		AND LESSON_NO = #{lessonNo}
	
	</select>
	
	
	
	<delete id="deleteList" parameterType="list"> 
		DELETE FROM LESSONS_ATTENDANCE
		<where> 
			<foreach collection="list" item="student" open="" close="" separator="OR"> 
			
			(LESSONS_DATE = #{student.date} AND LESSON_NO = #{student.lessonNo} AND MEMBER_NO = #{student.memberNo} AND 'N' = #{student.attendYn})
			 
			</foreach> 
		</where> 
		
	</delete>
	
	<!-- 즐겨찾기 -->
	<select id="bookmarkList" resultType="LessonListDTO">
	
		SELECT LESSON_TITLE,LESSON_SCHEDULE,LESSON_NO 
		FROM LESSONS_WISHLIST lw
		JOIN LESSONS l USING(LESSON_NO)
		WHERE lw.MEMBER_NO = #{memberNo}
	
	</select>
	
	<delete id="bookmarkRemove">
	
		DELETE FROM LESSONS_WISHLIST
		WHERE LESSON_NO = #{lessonNo}
		AND MEMBER_NO = #{memberNo}
	
	</delete>

			

</mapper>
